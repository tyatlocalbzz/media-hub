// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider  = "postgresql"
  url       = env("DATABASE_URL")
  directUrl = env("DIRECT_URL")
}

model User {
  id                String   @id @default(uuid())
  email             String   @unique
  // OAuth fields removed - using service account instead
  files             File[]
  syncLogs          SyncLog[]
  created_at        DateTime @default(now())
  updated_at        DateTime @updatedAt

  @@map("users")
}

model File {
  id          String   @id @default(cuid())
  userId      String
  driveFileId String   @unique
  name        String
  mimeType    String?
  size        BigInt?
  duration    Int?     // Duration in seconds for media files
  driveUrl    String?
  thumbnailUrl String?
  transcript  String?  @db.Text
  status      Status   @default(NEW)
  error       String?
  processedAt DateTime?
  driveModifiedTime DateTime? // Track Drive's modifiedTime
  lastSyncedAt      DateTime? // When we last synced this file
  isDeleted         Boolean   @default(false) // Soft delete for removed files
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  user        User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([userId])
  @@index([status])
  @@index([isDeleted])
}

enum Status {
  NEW
  TRANSCRIBING
  READY
}

model SyncLog {
  id          String   @id @default(cuid())
  userId      String
  startedAt   DateTime @default(now())
  completedAt DateTime?
  filesAdded  Int      @default(0)
  filesUpdated Int     @default(0)
  filesDeleted Int     @default(0)
  error       String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([userId])
  @@index([startedAt])
}
